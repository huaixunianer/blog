(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{459:function(v,_,a){"use strict";a.r(_);var t=a(3),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"数据库基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库基本概念"}},[v._v("#")]),v._v(" 数据库基本概念")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("什么是数据库？")]),v._v(" "),_("li",[v._v("数据库的作用？")])])]),v._v(" "),_("p",[v._v("要理解数据库必须先要知道数据是什么；数据（Data）是描述事物的符号，是指用物理符号记录下来的、可以鉴别的信息。数据具有多种表现形式，主要可分为文本数据和多媒体数据。各种形式的数据经过数字化处理后可存入计算机，便于进一步加工、处理使用。")]),v._v(" "),_("p",[v._v("而数据库（Database,DB）就是存储数据的仓库；长期存储计算机中的有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、描述和存储，因此数据库具有较小的冗余度、较高的数据独立性，系统易于扩展可以被多个用户共享。")]),v._v(" "),_("p",[v._v("数据库再往上延伸有数据库管理系统和数据库系统。")]),v._v(" "),_("h3",{attrs:{id:"数据库管理系统-dbms"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库管理系统-dbms"}},[v._v("#")]),v._v(" 数据库管理系统 DBMS")]),v._v(" "),_("p",[v._v("数据库管理系统（Batabase Management System,DBMS）是专门用于建立和管理数据库的一套软件，介于APP和OS之间。它负责组织和存储数据，并帮助数据库的使用者从庞大的数据中快速获取所需数据，及提供必要的安全性和完整性等控制价机制，实现对数据有效的管理与维护。\n其主要功能如下：")]),v._v(" "),_("ol",[_("li",[v._v("数据定义功能")]),v._v(" "),_("li",[v._v("数据操纵功能")]),v._v(" "),_("li",[v._v("数据库的运行和管理功能")]),v._v(" "),_("li",[v._v("数据库的建立和维护功能")]),v._v(" "),_("li",[v._v("数据组存储和管理功能")]),v._v(" "),_("li",[v._v("其他功能")])]),v._v(" "),_("h3",{attrs:{id:"数据库系统-dbs"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统-dbs"}},[v._v("#")]),v._v(" 数据库系统 DBS")]),v._v(" "),_("p",[v._v("数据库系统（Database System，DBS）是指在计算机中引入数据库系统技术之后的系统。一个完整的DBS需要包括数据库、数据库管理系统、应用程序、数据库管理员（Database Administrator，DBA）和用户。")]),v._v(" "),_("h2",{attrs:{id:"数据管理技术的发展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据管理技术的发展"}},[v._v("#")]),v._v(" 数据管理技术的发展")]),v._v(" "),_("p",[v._v("数据管理可以从两方面来理解：")]),v._v(" "),_("ol",[_("li",[v._v("针对组织业务的管理，负责制定并执行整个组织中关于数据的定义、组织、保护与有效使用的策略、过程和计划；")]),v._v(" "),_("li",[v._v("依靠技术，负责实现数据作为一种资源的集中控制管理。")])]),v._v(" "),_("p",[v._v("数据管理的任务是进行数据的收集、组织、控制、存储、选取、维护，实现在适当的时刻、以适当的形式、给适当的人、提供适当的数据，它是数据处理的中心问题，而数据处理则是针对各种数据进行收集、存储、加工和传播的一系列活动的总和。")]),v._v(" "),_("p",[v._v("随着计算机技术的发展及应用，数据管理技术共经历了3个阶段；分别为：")]),v._v(" "),_("ol",[_("li",[v._v("人工管理阶段")]),v._v(" "),_("li",[v._v("文件系统阶段")]),v._v(" "),_("li",[v._v("数据库系统阶段")])]),v._v(" "),_("h3",{attrs:{id:"人工管理阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#人工管理阶段"}},[v._v("#")]),v._v(" 人工管理阶段")]),v._v(" "),_("p",[v._v("20世纪50年代中期，当时的计算机所涉及的数据处理基本依赖手工方式进行，在硬件方面没有磁盘等直接存取数据的存储设备，数据只能存放在纸带或卡片上，软件方面只有汇编语言没有操作系统，数据处理通过批处理的方式实现，且程序运行结束后不会保持数据。该阶段的特点如下：")]),v._v(" "),_("ul",[_("li",[v._v("数据不保存")]),v._v(" "),_("li",[v._v("应用程序管理数据")]),v._v(" "),_("li",[v._v("数据面向应用")])]),v._v(" "),_("h3",{attrs:{id:"文件系统阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件系统阶段"}},[v._v("#")]),v._v(" 文件系统阶段")]),v._v(" "),_("p",[v._v("20世纪50年代后期到60年代中期，计算机软、硬件技术发展到了一定阶段。硬件方面配置了磁盘、磁鼓等直接存取设备；软件方面在操作系统中配备了专门的数据管理软件，即文件系统。")]),v._v(" "),_("p",[v._v("文件系统将数据的逻辑结构和物理结构分离，由“存放方法”实现逻辑结构和物理结构之间的映射。")]),v._v(" "),_("p",[v._v("APP只涉及数据的逻辑结构，系统决定数据的物理结构，两者之间可以有差别。当物理结构发生变化时，不会导致APP的修改，这称为数据的物理独立性。数据的物理独立性使APP脱离数据的物理结构，使其适用性得以提高。同时APP的编程人员不必关心数据的物理存储细节，因而生产效率相应也得到提高。")]),v._v(" "),_("h3",{attrs:{id:"数据库系统阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统阶段"}},[v._v("#")]),v._v(" 数据库系统阶段")]),v._v(" "),_("p",[v._v("20世纪60年代后期末，随着计算机技术与工业的迅速发展，计算机日益广泛地应用于企业管理，并对数据管理提出了更高的要求。\n首先，要求数据作为公共资源而集中管理控制，能为不同用户所共享，应消去大量数据冗余，节省存储空间；其次，当数据变更时，节省对多个副本的变更，从而缩小计算机运算时间开销，更为重要的是不会遗漏某些副本的变更而使系统出现数据不一致；再次，要求数据具有更高的独立性，不但要具有物理独立性还要有逻辑独立性。针对这些要求，数据库技术应运而生。\n文件系统到数据库系统标志着数据管理技术的飞跃，与人工管理、文件系统两种数据管理方法相比，数据库系统具有如下特点：")]),v._v(" "),_("ul",[_("li",[v._v("数据集成")]),v._v(" "),_("li",[v._v("数据共享性高")]),v._v(" "),_("li",[v._v("数据冗余小")]),v._v(" "),_("li",[v._v("数据一致性高")]),v._v(" "),_("li",[v._v("数据独立性高")]),v._v(" "),_("li",[v._v("实施统一管理与控制")]),v._v(" "),_("li",[v._v("减少应用程序开发与维护的工作量")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"数据库系统的结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统的结构"}},[v._v("#")]),v._v(" 数据库系统的结构")]),v._v(" "),_("p",[v._v("从DBA（数据库管理员）的视角来看，DB可以分为内部系统结构和外部体系结构")]),v._v(" "),_("ul",[_("li",[v._v("内部系统结构通采用三级模式结构")]),v._v(" "),_("li",[v._v("外部体系结构通常表现为集中式结构、分布式结构和并行结构等")])]),v._v(" "),_("p",[v._v("从数据库应用的用户角度来看，目前DB通常具有客户/服务器结构和浏览器/服务器结构，这也是数据库系统整体的运行与应用结构。")]),v._v(" "),_("h3",{attrs:{id:"数据库系统的三级模式结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统的三级模式结构"}},[v._v("#")]),v._v(" 数据库系统的三级模式结构")]),v._v(" "),_("p",[v._v("基本上遵循美国ANSI/APSRC数据库管理系统研究组提出的三级体系结构，即用户级、概念级和物理级。此结构也是目前各个不同DBMS产品所遵循的体系结构准则。")]),v._v(" "),_("p",[v._v("DB的三级模式结构是指DB是由模式（Schema）、外模式（Extermal Schema）和内模式（Internal Schema）三级构成。")]),v._v(" "),_("p",[_("strong",[v._v("1.模式")])]),v._v(" "),_("p",[v._v("也称为概念模式或逻辑模式，它是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。")]),v._v(" "),_("p",[v._v("模式实际上是数据库数据在逻辑级上的视图，即概念视图，其形式要比数据的物理存储方式抽象。")]),v._v(" "),_("p",[v._v("DBMS提供模式描述语言（Schema DDL）来严格定义模式，不仅要定有数据的逻辑结构，还要定义数据之间的联系，定义与数据相关的安全性、完整性等要求。")]),v._v(" "),_("p",[_("strong",[v._v("2.外模式")])]),v._v(" "),_("p",[v._v("也称为子模式（Subschema）或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一有关的数据的逻辑表示。")]),v._v(" "),_("p",[v._v("外模式实际上是用于满足不同数据库用户需求的数据视图，即用户视图，其通常是模式的子集，是对数据库整体数据结构的局部重构。")]),v._v(" "),_("p",[v._v("一个数据库可以有多个不同的外模式，允许它们有一定的重叠，切一个外模式可只为一个APP使用，也可为多个APP共享。")]),v._v(" "),_("p",[v._v("DBMS提供了子模式描述语言（Subschema DDL）来严格定义子模式。")]),v._v(" "),_("p",[_("strong",[v._v("3.内模式")])]),v._v(" "),_("p",[v._v("也称为存储模式（Storage Schema），它是对数据库中数据物理结构和存储方式的描述，是数据在数据库内部的表示形式。")]),v._v(" "),_("p",[v._v("内模式实际上是整个数据库的最底层（但不是最底层的物理层）表示，它不同于物理层，是数据库DBA所见到的，特定的DBMS所处理的数据库的内部结构，即内部视图或存储视图。")]),v._v(" "),_("p",[v._v("DBMS提供内模式描述语言（内模式DDL，或者存储模式DDL）来严格地定义内模式，即定义所有内部记录类型、索引和文件的组织方式，以及所有数据控制方面的细节。")]),v._v(" "),_("p",[_("strong",[v._v("4.三级模式结构的两层映射与数据独立性")])]),v._v(" "),_("p",[v._v("构成数据库系统三级模式结构的三个模式分别是对数据的三级抽象，它们彼此间具有一下特点")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("● 一个数据库的整体逻辑结构和特征的描述是独立于数据其它层次结构的描述，其是数据库的核心，也是数据库设计的关键。\n● 一个数据库的内部存储模式依赖于概念模式，但存储模式独立于外部模式，也独立于具体的存储设备。\n● 用户逻辑结构是在全局逻辑结构描述的基础上定义的，它依赖于特定的外模式，与数据库的模式和存储结构独立。\n● 特定的APP是在外模式的逻辑结构上编写的，它依赖于特定的外模式，与数据库的模式和存储结构独立。\n")])])]),_("p",[_("strong",[v._v("外模式/模式映像")])]),v._v(" "),_("p",[v._v("*所谓映像是一种对应规则，它指出映像双方是如何进行转换的。")]),v._v(" "),_("p",[v._v("外模式/模式映像定义了各个外模式与概念模式之间的映像关系，这些映像定义通常在各自的外模式中加以描述。由于同一个模式可以有一个或多个外模式，因此对于每一个外模式，DBS都会有一个外模式/模式映像。")]),v._v(" "),_("p",[v._v("DBS的模式若发生变化，DBA会对各个外模式/模式映像做出相应的改变，使哪些对用户可见的外模式保持不变，从而APP的编程人员不必修改那些依据外模式所编写的APP，如此便实现了外模式不受概念模式变化的影响，并保证了数据与程序的逻辑独立性。")]),v._v(" "),_("p",[_("strong",[v._v("模式/内模式映像")])]),v._v(" "),_("p",[v._v("模式/内模式映像定义了数据库全局逻辑结构与物理存储之间的对应关系，这种映像定义通常是在模式中加以描述的。由于DB中只有一个模式，且也只有一个内模式，所以模式/内模式映像是唯一的。")]),v._v(" "),_("p",[v._v("DBS的物理存储若发生变化，DBA也会对模式/内模式做出相应调整，以使DBS的模式保持不变，从而不必去修改APP，如此实现了概念模式不受内模式变化的影响，并保证了数据与程序的物理独立性。")]),v._v(" "),_("h3",{attrs:{id:"数据库系统的运行与应用结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统的运行与应用结构"}},[v._v("#")]),v._v(" 数据库系统的运行与应用结构")]),v._v(" "),_("p",[_("strong",[v._v("1.客户/服务器结构")])]),v._v(" "),_("p",[v._v("数据库的使用者（DBA，程序员）可以使用命令行客户端、图形化界面管理工具、APP等来连接DBMS，并可以通常DBMS查询和处理存储在底层数据库中的各种数据。")]),v._v(" "),_("p",[v._v("命令行客户端、图形化界面管理工具、APP可以被称为（前台、客户端、表示层），主要完成DB使用者的交互任务；DBMS又可以被称为（服务器、后台、数据层），主要负责数据管理。")]),v._v(" "),_("p",[v._v("这种操作DB的模式被称为客户/服务器（Client/Server，C/S），可使用单机模式和网络方式运行。")]),v._v(" "),_("p",[_("strong",[v._v("2.浏览器/服务器结构")])]),v._v(" "),_("p",[v._v("浏览器/服务器结构是一种基于web应用的客户/服务器结构，也称为三层/服务器结构。在客户/服务器结构的基础上增加了一个处理层。")]),v._v(" "),_("p",[v._v("在DBS中，它将DBMS交互的客户端进一步细分为表示层和处理层。")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("● 表示层：是数据库使用者的操作和展示界面，由用于上网的各种浏览器构成，以此减轻DBS中客户端的工作负担\n● 处理层：也称为中间层，主要负责处理DB使用者的具体应用逻辑，与后台的DBMS共同组成功能更加丰富的“胖服务器”这种工作模式也称为浏览器/服务器（Browser/Server，B/S）模式。\n")])])]),_("h2",{attrs:{id:"数据模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[v._v("#")]),v._v(" 数据模型")]),v._v(" "),_("h3",{attrs:{id:"数据特征与数据模型组成要素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据特征与数据模型组成要素"}},[v._v("#")]),v._v(" 数据特征与数据模型组成要素")]),v._v(" "),_("p",[v._v("数据具有静态和动态两种特征。")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("数据的静态特征：\n● 数据的基本结构\n● 数据间的联系\n● 数据取值范围的约束\n数据的动态特征：\n● 对数据可以进行符合一定规则的操作\n数据模型的组成：\n● 数据结构：描述的是数据的静态特效特性\n  ○ （数据对象的数据类型、内容、数据、数据对象间的联系）\n● 数据操作：描述的是数据的动态特性\n  ○ 是对各种对象的实例允许执行的操作的集合，包括操作有关的操作规则\n  ○ 主要分为分析和检索两大类\n● 数据约束：描述的是数据结构中数据间的语法和语义关联\n  ○ （数据完整性约束、数据安全性约束、并发控制约束）\n  ○ 数据约束即刻画了数据静态特征，也表示了数据动态行为规则\n")])])]),_("h3",{attrs:{id:"数据模型的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据模型的分类"}},[v._v("#")]),v._v(" 数据模型的分类")]),v._v(" "),_("p",[_("strong",[v._v("1. 概念层数据模型")])]),v._v(" "),_("p",[v._v("也称为数据的概念模型（Conceptual Model）或信息模型，是数据抽象级别的最高级，与具体的计算机系统无关，且独立于DBMS，但容易向DBMS所支持的逻辑数据模型转换。")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("● 信息世界中的基本概念\n  ○ 实体（Entity）：可是具体事物也可是抽象概念或联系\n  ○ 属性（Attribute）：实体所具有的某种特性\n  ○ 码或键（key）：可唯一标识实体的属性集\n  ○ 域（Domain）：属性的取值范围\n  ○ 实体型（Entity Type）：具有相同属性的实体必然具有的共同的特征和性质\n  ○ 实体集（Entity Set）：同型实体的集合称为实体集\n  ○ 联系（Relationship）：实体内部的联系、实体之间的联系\n● 概念模型的表示方法\n  ○ E-R图（P.P.S.chen、1976年、E-R方法、E-R模型）实体-联系方法（Entity-Relationship approach）\n    ■ 实体：矩形\n    ■ 属性：椭圆形\n    ■ 联系：菱形，同时联系也具有属性\n  ○ E-R方法是抽象和描述现实世界的有力工具，E-R图表示的概念模型独立于具体的DBMS所支持的逻辑模型，是各种逻辑模型的基础，比逻辑模型更一般、更抽象、更接近显示世界。\n")])])]),_("p",[_("strong",[v._v("2. 逻辑层数据模型")])]),v._v(" "),_("p",[v._v("也称为数据的逻辑模型（Logical Model）是数据抽象的中间层，描述数据整体的逻辑结构。它你要考虑用户容易理解，又要考虑便于DBMS实现。")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("● 主要的逻辑数据模型有\n  ○ 层次模型（Hierarchical Model）\n  ○ 网状模型（Network Model）\n  ○ 关系模型（Relational Model）\n  ○ 面向对象模型（Object Oriented Model）\n")])])]),_("p",[_("strong",[v._v("3. 物理层数据模型")])]),v._v(" "),_("p",[v._v("也称为数据的物理模式（Physical Model）描述数据在存储介质上的组织结构，是逻辑模型的物理实现，也就是每一种逻辑模型的实现时都有与之对应的物理模型。")]),v._v(" "),_("p",[v._v("物理模型是数据库最底层的抽象，它确定数据的物理存储结构、数据存取路径以及调整、优化数据库的性能。")]),v._v(" "),_("p",[v._v("物理模型的设计目标是提高数据库性能和有效利用存储空间。")]),v._v(" "),_("p",[v._v("概括而言三个不同的数据库之间既相互独立又存在这关联；从现实世界到概念模型的转换是由数据库设计人员完成的，从概念模型到逻辑模型的转换可用数据库设计工具协助设计人员完成，从逻辑模型到物理模型的转换主要是由DBMS完成的。")])])}),[],!1,null,null,null);_.default=s.exports}}]);